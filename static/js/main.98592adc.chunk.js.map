{"version":3,"sources":["components/homePage/aboutMe.jsx","components/homePage/showcase.jsx","images/tetris.png","images/connect4.png","images/dllInjector.png","components/homePage/homePage.jsx","components/connect4Page/connect4AI.jsx","components/connect4Page/connect4.jsx","components/connect4Page/connect4Page.jsx","components/tetrisPage/tetrisAI.jsx","components/tetrisPage/tetris.jsx","components/tetrisPage/tetrisPage.jsx","components/navbutton.jsx","components/navbar.jsx","components/footer.jsx","routes.js","index.js"],"names":["AboutMe","state","icons","icon","link","style","height","className","this","map","role","href","target","rel","Component","Showcase","props","image","imgDivRef","undefined","resizeImage","console","log","current","offsetWidth","offsetHeight","fetch","then","response","blob","Resizer","imageFileResizer","uri","setState","React","createRef","window","addEventListener","removeEventListener","width","title","description","technologies","join","github","tryItButton","ref","src","alt","tryIt","Fragment","HomePage","showcaseEntries","TetrisImage","Connect4Image","DllInjectorImage","entry","alphabeta_minmax","board","depth","maximizing","alpha","beta","boardScore","boardIsWon","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","getPlayablePositions","length","value","bestColumn","playableRow","playableCol","placePiece","minmaxResult","Math","max","min","removePiece","piece","row","col","playablePositions","findFirstOpenRow","push","scoreWindow","score","oppositePiece","pieceCount","filter","x","oppositePieceCount","emptyCount","floor","Connect4","rows","cols","stageWidth","stageHeight","gameIsOver","currentlyHovered","cells","checkSize","w","innerWidth","h","innerHeight","calcW","calcH","initialCells","Array","from","hoverState","color","opacity","circled","resetBoard","type","onClick","rowIdx","cell","colIdx","getInsideShape","getCircledShape","y","stroke","strokeWidth","toString","keys","onMouseEnter","e","handleMouseEnter","onMouseLeave","handleMouseLeave","handleClick","onTap","radius","fill","lowestRow","getLowestRow","currCells","currRow","currCol","simpleBoard","elem1","elem2","circleIfWin","aiPlayRow","Connect4Page","calculateMove","currentPiece","recursionObject","seen","Set","currMoves","currMax","currRotations","aiMovesRotations","aiMoves","findBestMoves","apply","has","rotation","add","forEach","move","rotatePiece","overlapsOrOffBoard","placePieceOnBoard","boardValue","erasePieceOnBoard","pop","columnHeight","numGaps","gaps","row2","sumHeights","fullRows","isRowFull","holes","bumpiness","abs","Tetris","linesCleared","pieceMatrix","tickTime","aiPlaying","tickInterval","pieces","colors","getResetState","setInterval","gameTick","event","handleKeyDown","clearInterval","toggleAI","decreaseSpeed","increaseSpeed","spawnPiece","randPiece","random","randColor","pieceRows","pieceCols","randPieceMatrix","newPiece","round","every","elem","newBoard","splice","rowsCleared","clearRow","dir","reverse","JSON","parse","stringify","aiMove","clearFullRows","key","playerRotateRight","playerMoveLeft","playerRotateLeft","playerMoveRight","TetrisPage","NavButton","getNavButton","navButton","children","id","aria-current","header","name","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-labelledby","child","data","NavBar","navButtons","Footer","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98592adc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../../../node_modules/@fortawesome/fontawesome-free/css/all.css\";\r\n\r\nclass AboutMe extends Component {\r\n    state = {\r\n        icons: [\r\n            {\r\n                icon: \"fab fa-linkedin-in\",\r\n                link: \"https://www.linkedin.com/in/jason-t-hirsch/\",\r\n            },\r\n            { icon: \"fab fa-github\", link: \"https://github.com/jason-hirsch\" },\r\n            { icon: \"far fa-envelope\", link: \"mailto:jasonhirsch36@gmail.com\" },\r\n        ],\r\n    };\r\n    render() {\r\n        return (\r\n            <div style={{ height: \"100vh\" }}>\r\n                <div className=\"py-5\"></div>\r\n                <div className=\"py-5\"></div>\r\n                <div className=\"py-5\"></div>\r\n                <h1 className=\"display-1 bg-dark text-warning text-center\">\r\n                    Jason Hirsch\r\n                </h1>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    {this.state.icons.map((icon) => (\r\n                        <a\r\n                            key={icon.icon}\r\n                            role=\"button\"\r\n                            className=\"btn btn-dark m-3\"\r\n                            href={icon.link}\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                        >\r\n                            <i className={icon.icon + \" fa-2x\"}></i>\r\n                        </a>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AboutMe;\r\n","import React, { Component } from \"react\";\r\nimport Resizer from \"react-image-file-resizer\";\r\nimport \"../../../node_modules/@fortawesome/fontawesome-free/css/all.css\";\r\n\r\nclass Showcase extends Component {\r\n    state = {\r\n        image: \"\",\r\n    };\r\n\r\n    imgDivRef = undefined;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state.image = this.props.image;\r\n        this.imgDivRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resizeImage();\r\n        window.addEventListener(\"resize\", this.resizeImage);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resizeImage);\r\n    }\r\n\r\n    resizeImage = () => {\r\n        console.log(\r\n            this.imgDivRef.current.offsetWidth,\r\n            this.imgDivRef.current.offsetHeight\r\n        );\r\n        fetch(this.props.image)\r\n            .then((response) => response.blob())\r\n            .then((image) =>\r\n                Resizer.imageFileResizer(\r\n                    image,\r\n                    this.imgDivRef.current.offsetWidth * 0.7,\r\n                    this.imgDivRef.current.offsetHeight * 0.7,\r\n                    \"JPEG\",\r\n                    100,\r\n                    0,\r\n                    (uri) => this.setState({ image: uri })\r\n                )\r\n            );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"d-flex flex-row justify-content-center\"\r\n                style={{ height: \"100vh\" }}\r\n            >\r\n                <div\r\n                    className=\"d-inline d-flex flex-column justify-content-center px-5\"\r\n                    style={{ width: \"50%\" }}\r\n                >\r\n                    <h1 className=\"display-4 bg-dark text-warning px-5 py-3\">\r\n                        {this.props.title}\r\n                    </h1>\r\n                    <p className=\"description-text px-5 py-1\">\r\n                        {this.props.description}\r\n                    </p>\r\n                    <p className=\"technology-text px-5 py-1\">\r\n                        {this.props.technologies.join(\", \")}\r\n                    </p>\r\n                    <div className=\"d-flex flex-row px-5\">\r\n                        <a\r\n                            key=\"fab fa-github\"\r\n                            role=\"button\"\r\n                            className=\"btn btn-dark mx-2 py-1\"\r\n                            href={this.props.github}\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                        >\r\n                            <i className={\"fab fa-github fa-2x\"}></i>\r\n                        </a>\r\n                        {this.tryItButton()}\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    className=\"d-inline text-center px-5\"\r\n                    ref={this.imgDivRef}\r\n                    style={{ width: \"50%\" }}\r\n                >\r\n                    <div\r\n                        className=\"d-flex flex-column justify-content-center px-5\"\r\n                        style={{ height: \"100%\" }}\r\n                    >\r\n                        <img\r\n                            className=\"mx-auto py-1\"\r\n                            src={this.state.image}\r\n                            alt=\"\"\r\n                        ></img>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    tryItButton() {\r\n        if (this.props.tryIt !== undefined) {\r\n            return (\r\n                <a\r\n                    role=\"button\"\r\n                    className=\"btn btn-outline-primary btn-lg\"\r\n                    href={this.props.tryIt}\r\n                >\r\n                    Try it\r\n                </a>\r\n            );\r\n        } else {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Showcase;\r\n","export default __webpack_public_path__ + \"static/media/tetris.2b58ddb0.png\";","export default __webpack_public_path__ + \"static/media/connect4.aa60f1ae.png\";","export default __webpack_public_path__ + \"static/media/dllInjector.9adc6cfd.png\";","import React, { Component } from \"react\";\r\nimport AboutMe from \"./aboutMe\";\r\nimport Showcase from \"./showcase\";\r\nimport \"../../styles/main.css\";\r\nimport TetrisImage from \"../../images/tetris.png\";\r\nimport Connect4Image from \"../../images/connect4.png\";\r\nimport DllInjectorImage from \"../../images/dllInjector.png\";\r\n\r\nclass HomePage extends Component {\r\n    state = {\r\n        showcaseEntries: [\r\n            {\r\n                title: \"Tetris AI\",\r\n                description:\r\n                    \"Either play the game of tetris or watch an AI play it. The AI uses a depth first search algorithm to determine what moves to make.\",\r\n                technologies: [\r\n                    \"Javascript\",\r\n                    \"ReactJS\",\r\n                    \"KonvaJS\",\r\n                    \"Depth First Search\",\r\n                ],\r\n                github: \"https://github.com/jason-hirsch\",\r\n                tryIt: \"/games/tetris\",\r\n                image: TetrisImage,\r\n            },\r\n            {\r\n                title: \"Connect4 AI\",\r\n                description:\r\n                    \"Play the game of connect 4 against an AI. The AI uses a minmax algorithm with alpha-beta pruning to determine what move to make.\",\r\n                technologies: [\r\n                    \"Javascript\",\r\n                    \"ReactJS\",\r\n                    \"KonvaJS\",\r\n                    \"Minmax Algorithm\",\r\n                ],\r\n                github: \"https://github.com/jason-hirsch\",\r\n                tryIt: \"/games/connect4\",\r\n                image: Connect4Image,\r\n            },\r\n            {\r\n                title: \"DLL Injector\",\r\n                description:\r\n                    \"A desktop application for injecting dynamic linked libraries (DLLs) into exectuables.\",\r\n                technologies: [\"C++\", \"Qt UI Framework\", \"Windows SDK\"],\r\n                github: \"https://github.com/jason-hirsch\",\r\n                image: DllInjectorImage,\r\n            },\r\n        ],\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main-div\">\r\n                <AboutMe></AboutMe>\r\n                {this.state.showcaseEntries.map((entry) => (\r\n                    <Showcase\r\n                        key={entry.title}\r\n                        title={entry.title}\r\n                        description={entry.description}\r\n                        technologies={entry.technologies}\r\n                        github={entry.github}\r\n                        tryIt={entry.tryIt}\r\n                        image={entry.image}\r\n                    ></Showcase>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n","export function alphabeta_minmax(board, depth, maximizing, alpha, beta) {\r\n    if (depth === 0) {\r\n        return [-1, boardScore(board, 2)];\r\n    } else if (boardIsWon(board, 2)) {\r\n        return [-1, Number.MAX_SAFE_INTEGER];\r\n    } else if (boardIsWon(board, 1)) {\r\n        return [-1, Number.MIN_SAFE_INTEGER];\r\n    } else if (getPlayablePositions(board).length === 0) {\r\n        return [-1, 0];\r\n    }\r\n\r\n    let value = maximizing ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;\r\n    let bestColumn = -1;\r\n\r\n    for (let [playableRow, playableCol] of getPlayablePositions(board)) {\r\n        placePiece(board, playableRow, playableCol, maximizing ? 2 : 1);\r\n\r\n        if (maximizing) {\r\n            let minmaxResult = alphabeta_minmax(\r\n                board,\r\n                depth - 1,\r\n                !maximizing,\r\n                alpha,\r\n                beta\r\n            );\r\n\r\n            if (minmaxResult[1] > value) {\r\n                value = minmaxResult[1];\r\n                bestColumn = playableCol;\r\n            }\r\n            alpha = Math.max(alpha, value);\r\n        } else {\r\n            let minmaxResult = alphabeta_minmax(\r\n                board,\r\n                depth - 1,\r\n                !maximizing,\r\n                alpha,\r\n                beta\r\n            );\r\n\r\n            if (minmaxResult[1] < value) {\r\n                value = minmaxResult[1];\r\n                bestColumn = playableCol;\r\n            }\r\n            beta = Math.min(beta, value);\r\n        }\r\n\r\n        removePiece(board, playableRow, playableCol);\r\n\r\n        if (alpha >= beta) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return [bestColumn, value];\r\n}\r\n\r\nfunction boardIsWon(board, piece) {\r\n    for (let row = 0; row < board.length; row++) {\r\n        for (let col = 0; col < board[0].length - 3; col++) {\r\n            if (\r\n                board[row][col] === piece &&\r\n                board[row][col + 1] === piece &&\r\n                board[row][col + 2] === piece &&\r\n                board[row][col + 3] === piece\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let row = 0; row < board.length - 3; row++) {\r\n        for (let col = 0; col < board[0].length; col++) {\r\n            if (\r\n                board[row][col] === piece &&\r\n                board[row + 1][col] === piece &&\r\n                board[row + 2][col] === piece &&\r\n                board[row + 3][col] === piece\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let row = 0; row < board.length - 3; row++) {\r\n        for (let col = 0; col < board[0].length - 3; col++) {\r\n            if (\r\n                board[row][col] === piece &&\r\n                board[row + 1][col + 1] === piece &&\r\n                board[row + 2][col + 2] === piece &&\r\n                board[row + 3][col + 3] === piece\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let row = 3; row < board.length; row++) {\r\n        for (let col = 0; col < board[0].length - 3; col++) {\r\n            if (\r\n                board[row][col] === piece &&\r\n                board[row - 1][col + 1] === piece &&\r\n                board[row - 2][col + 2] === piece &&\r\n                board[row - 3][col + 3] === piece\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction getPlayablePositions(board) {\r\n    let playablePositions = [];\r\n    for (let col = 0; col < board[0].length; col++) {\r\n        let row = findFirstOpenRow(board, col);\r\n        if (row !== -1) {\r\n            playablePositions.push([row, col]);\r\n        }\r\n    }\r\n    return playablePositions;\r\n}\r\n\r\nfunction findFirstOpenRow(board, col) {\r\n    for (let row = board.length - 1; row >= 0; row--) {\r\n        if (board[row][col] === 0) {\r\n            return row;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nfunction placePiece(board, row, col, piece) {\r\n    board[row][col] = piece;\r\n}\r\n\r\nfunction removePiece(board, row, col) {\r\n    board[row][col] = 0;\r\n}\r\n\r\nfunction scoreWindow(window, piece) {\r\n    let score = 0;\r\n    let oppositePiece = piece === 1 ? 2 : 1;\r\n\r\n    let pieceCount = window.filter((x) => x === piece).length;\r\n    let oppositePieceCount = window.filter((x) => x === oppositePiece).length;\r\n    let emptyCount = window.filter((x) => x === 0).length;\r\n\r\n    if (pieceCount === 4) {\r\n        score += 100;\r\n    } else if (pieceCount === 3 && emptyCount === 1) {\r\n        score += 5;\r\n    } else if (pieceCount === 2 && emptyCount === 2) {\r\n        score += 2;\r\n    } else if (oppositePieceCount === 3 && emptyCount === 1) {\r\n        score -= 4;\r\n    }\r\n\r\n    return score;\r\n}\r\n\r\nfunction boardScore(board, piece) {\r\n    let score = 0;\r\n\r\n    for (let row = 0; row < board.length; row++) {\r\n        if (board[row][Math.floor(board[0].length / 2)] === piece) {\r\n            score += 3;\r\n        }\r\n    }\r\n\r\n    for (let row = 0; row < board.length; row++) {\r\n        for (let col = 0; col < board[0].length - 3; col++) {\r\n            let window = [\r\n                board[row][col],\r\n                board[row][col + 1],\r\n                board[row][col + 2],\r\n                board[row][col + 3],\r\n            ];\r\n            score += scoreWindow(window, piece);\r\n        }\r\n    }\r\n\r\n    for (let col = 0; col < board[0].length; col++) {\r\n        for (let row = 0; row < board.length - 3; row++) {\r\n            let window = [\r\n                board[row][col],\r\n                board[row + 1][col],\r\n                board[row + 2][col],\r\n                board[row + 3][col],\r\n            ];\r\n            score += scoreWindow(window, piece);\r\n        }\r\n    }\r\n\r\n    for (let row = 0; row < board.length - 3; row++) {\r\n        for (let col = 0; col < board[0].length - 3; col++) {\r\n            let window = [\r\n                board[row][col],\r\n                board[row + 1][col + 1],\r\n                board[row + 2][col + 2],\r\n                board[row + 3][col + 3],\r\n            ];\r\n            score += scoreWindow(window, piece);\r\n        }\r\n    }\r\n\r\n    for (let row = 3; row < board.length; row++) {\r\n        for (let col = 0; col < board[0].length - 3; col++) {\r\n            let window = [\r\n                board[row][col],\r\n                board[row - 1][col + 1],\r\n                board[row - 2][col + 2],\r\n                board[row - 3][col + 3],\r\n            ];\r\n            score += scoreWindow(window, piece);\r\n        }\r\n    }\r\n\r\n    return score;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Stage, Layer, Rect, Circle } from \"react-konva\";\r\nimport { alphabeta_minmax } from \"./connect4AI\";\r\n\r\nclass Connect4 extends Component {\r\n    state = {\r\n        rows: 6,\r\n        cols: 7,\r\n        stageWidth: 700,\r\n        stageHeight: 600,\r\n        gameIsOver: false,\r\n        currentlyHovered: { row: undefined, col: undefined },\r\n        cells: [[]],\r\n    };\r\n\r\n    resetBoard() {\r\n        let initialCells = Array.from(Array(this.state.rows), () => {\r\n            return Array.from(Array(this.state.cols), () => {\r\n                return {\r\n                    state: \"empty\",\r\n                    hoverState: \"empty\",\r\n                    color: \"\",\r\n                    opacity: 1,\r\n                    circled: false,\r\n                };\r\n            });\r\n        });\r\n\r\n        this.setState({\r\n            gameIsOver: false,\r\n            currentlyHovered: { row: undefined, col: undefined },\r\n            cells: initialCells,\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetBoard();\r\n        this.checkSize();\r\n        window.addEventListener(\"resize\", this.checkSize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.checkSize);\r\n    }\r\n\r\n    checkSize = () => {\r\n        let w = window.innerWidth * 0.6; //Use 60% of window width/height\r\n        let h = window.innerHeight * 0.6;\r\n        let calcW = 0;\r\n        let calcH = 0;\r\n\r\n        if (w / this.state.cols < h / this.state.rows) {\r\n            calcW = w;\r\n            calcH = (w / this.state.cols) * this.state.rows;\r\n        } else {\r\n            calcW = (h / this.state.rows) * this.state.cols;\r\n            calcH = h;\r\n        }\r\n\r\n        this.setState({\r\n            stageWidth: calcW,\r\n            stageHeight: calcH,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"d-flex justify-content-center py-4\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary btn-lg\"\r\n                        onClick={() => this.resetBoard()}\r\n                    >\r\n                        Reset Board\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <Stage\r\n                        width={this.state.stageWidth}\r\n                        height={this.state.stageHeight}\r\n                    >\r\n                        <Layer>\r\n                            {this.state.cells.map((row, rowIdx) => {\r\n                                return row.map((cell, colIdx) => (\r\n                                    <React.Fragment\r\n                                        key={\r\n                                            rowIdx.toString() +\r\n                                            \",\" +\r\n                                            colIdx.toString()\r\n                                        }\r\n                                    >\r\n                                        {this.getInsideShape(\r\n                                            rowIdx,\r\n                                            colIdx,\r\n                                            cell\r\n                                        )}\r\n                                        {this.getCircledShape(\r\n                                            rowIdx,\r\n                                            colIdx,\r\n                                            cell\r\n                                        )}\r\n                                        <Rect\r\n                                            x={\r\n                                                (colIdx / this.state.cols) *\r\n                                                this.state.stageWidth\r\n                                            }\r\n                                            y={\r\n                                                (rowIdx / this.state.rows) *\r\n                                                this.state.stageHeight\r\n                                            }\r\n                                            width={\r\n                                                this.state.stageWidth /\r\n                                                this.state.cols\r\n                                            }\r\n                                            height={\r\n                                                this.state.stageHeight /\r\n                                                this.state.rows\r\n                                            }\r\n                                            stroke=\"white\"\r\n                                            strokeWidth={4}\r\n                                        />\r\n                                    </React.Fragment>\r\n                                ));\r\n                            })}\r\n                            {[...Array(this.state.cols).keys()].map((col) => (\r\n                                <React.Fragment\r\n                                    key={col.toString() + \"colHoverRect\"}\r\n                                >\r\n                                    <Rect\r\n                                        x={\r\n                                            (col / this.state.cols) *\r\n                                            this.state.stageWidth\r\n                                        }\r\n                                        y={0}\r\n                                        width={\r\n                                            this.state.stageWidth /\r\n                                            this.state.cols\r\n                                        }\r\n                                        height={this.state.stageHeight}\r\n                                        stroke=\"white\"\r\n                                        strokeWidth={4}\r\n                                        onMouseEnter={(e) => {\r\n                                            this.handleMouseEnter(col);\r\n                                        }}\r\n                                        onMouseLeave={(e) => {\r\n                                            this.handleMouseLeave();\r\n                                        }}\r\n                                        onClick={(e) => {\r\n                                            this.handleClick();\r\n                                        }}\r\n                                        onTap={(e) => {\r\n                                            this.handleClick();\r\n                                        }}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))}\r\n                        </Layer>\r\n                    </Stage>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    getInsideShape(row, col, cell) {\r\n        if (cell.state === \"filled\" || cell.hoverState === \"filled\") {\r\n            return (\r\n                <Circle\r\n                    x={\r\n                        (col / this.state.cols) * this.state.stageWidth +\r\n                        this.state.stageWidth / this.state.cols / 2\r\n                    }\r\n                    y={\r\n                        (row / this.state.rows) * this.state.stageHeight +\r\n                        this.state.stageHeight / this.state.rows / 2\r\n                    }\r\n                    radius={this.state.stageWidth / this.state.cols / 2.4}\r\n                    fill={cell.color}\r\n                    strokeWidth={4}\r\n                    opacity={cell.opacity}\r\n                />\r\n            );\r\n        } else {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n    }\r\n\r\n    getCircledShape(row, col, cell) {\r\n        if (cell.circled === true) {\r\n            return (\r\n                <Circle\r\n                    x={\r\n                        (col / this.state.cols) * this.state.stageWidth +\r\n                        this.state.stageWidth / this.state.cols / 2\r\n                    }\r\n                    y={\r\n                        (row / this.state.rows) * this.state.stageHeight +\r\n                        this.state.stageHeight / this.state.rows / 2\r\n                    }\r\n                    radius={this.state.stageWidth / this.state.cols / 2.2}\r\n                    stroke={\"yellow\"}\r\n                    strokeWidth={4}\r\n                    opacity={cell.opacity}\r\n                />\r\n            );\r\n        } else {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n    }\r\n\r\n    getLowestRow(col) {\r\n        let lowestRow = undefined;\r\n\r\n        for (let row = this.state.rows - 1; row >= 0; row--) {\r\n            if (this.state.cells[row][col].state !== \"filled\") {\r\n                lowestRow = row;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return lowestRow;\r\n    }\r\n\r\n    circleIfWin(board, color) {\r\n        for (let row = 0; row < board.length; row++) {\r\n            for (let col = 0; col < board[0].length - 3; col++) {\r\n                if (\r\n                    board[row][col].color === color &&\r\n                    board[row][col + 1].color === color &&\r\n                    board[row][col + 2].color === color &&\r\n                    board[row][col + 3].color === color\r\n                ) {\r\n                    board[row][col].circled = true;\r\n                    board[row][col + 1].circled = true;\r\n                    board[row][col + 2].circled = true;\r\n                    board[row][col + 3].circled = true;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let row = 0; row < board.length - 3; row++) {\r\n            for (let col = 0; col < board[0].length; col++) {\r\n                if (\r\n                    board[row][col].color === color &&\r\n                    board[row + 1][col].color === color &&\r\n                    board[row + 2][col].color === color &&\r\n                    board[row + 3][col].color === color\r\n                ) {\r\n                    board[row][col].circled = true;\r\n                    board[row + 1][col].circled = true;\r\n                    board[row + 2][col].circled = true;\r\n                    board[row + 3][col].circled = true;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let row = 0; row < board.length - 3; row++) {\r\n            for (let col = 0; col < board[0].length - 3; col++) {\r\n                if (\r\n                    board[row][col].color === color &&\r\n                    board[row + 1][col + 1].color === color &&\r\n                    board[row + 2][col + 2].color === color &&\r\n                    board[row + 3][col + 3].color === color\r\n                ) {\r\n                    board[row][col].circled = true;\r\n                    board[row + 1][col + 1].circled = true;\r\n                    board[row + 2][col + 2].circled = true;\r\n                    board[row + 3][col + 3].circled = true;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let row = 3; row < board.length; row++) {\r\n            for (let col = 0; col < board[0].length - 3; col++) {\r\n                if (\r\n                    board[row][col].color === color &&\r\n                    board[row - 1][col + 1].color === color &&\r\n                    board[row - 2][col + 2].color === color &&\r\n                    board[row - 3][col + 3].color === color\r\n                ) {\r\n                    board[row][col].circled = true;\r\n                    board[row - 1][col + 1].circled = true;\r\n                    board[row - 2][col + 2].circled = true;\r\n                    board[row - 3][col + 3].circled = true;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    handleMouseEnter(col) {\r\n        if (this.state.gameIsOver === false) {\r\n            let lowestRow = this.getLowestRow(col);\r\n\r\n            if (lowestRow !== undefined) {\r\n                let currCells = this.state.cells;\r\n                currCells[lowestRow][col].hoverState = \"filled\";\r\n                currCells[lowestRow][col].color = \"red\";\r\n                currCells[lowestRow][col].opacity = 0.5;\r\n                this.setState({\r\n                    currentlyHovered: { row: lowestRow, col: col },\r\n                    cells: currCells,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    currentlyHovered: { row: undefined, col: undefined },\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseLeave() {\r\n        let currRow = this.state.currentlyHovered.row;\r\n        let currCol = this.state.currentlyHovered.col;\r\n        if (currRow !== undefined && currCol !== undefined) {\r\n            let currCells = this.state.cells;\r\n            currCells[currRow][currCol].hoverState = \"empty\";\r\n            currCells[currRow][currCol].color = \"\";\r\n            currCells[currRow][currCol].opacity = 1;\r\n            this.setState({\r\n                currentlyHovered: { row: undefined, col: undefined },\r\n                cells: currCells,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleClick() {\r\n        if (this.state.gameIsOver === false) {\r\n            let currRow = this.state.currentlyHovered.row;\r\n            let currCol = this.state.currentlyHovered.col;\r\n            if (currRow !== undefined && currCol !== undefined) {\r\n                let currCells = this.state.cells;\r\n                currCells[currRow][currCol].state = \"filled\";\r\n                currCells[currRow][currCol].hoverState = \"empty\";\r\n                currCells[currRow][currCol].color = \"red\";\r\n                currCells[currRow][currCol].opacity = 1;\r\n\r\n                let simpleBoard = Array.from(\r\n                    Array(currCells.length),\r\n                    (elem1, row) => {\r\n                        return Array.from(\r\n                            Array(currCells[0].length),\r\n                            (elem2, col) => {\r\n                                if (currCells[row][col].color === \"red\") {\r\n                                    return 1;\r\n                                } else if (\r\n                                    currCells[row][col].color === \"blue\"\r\n                                ) {\r\n                                    return 2;\r\n                                }\r\n                                return 0;\r\n                            }\r\n                        );\r\n                    }\r\n                );\r\n\r\n                if (this.circleIfWin(currCells, \"red\")) {\r\n                    this.setState({\r\n                        gameIsOver: true,\r\n                        currentlyHovered: { row: undefined, col: undefined },\r\n                    });\r\n                } else {\r\n                    let minmaxResult = alphabeta_minmax(\r\n                        simpleBoard,\r\n                        5,\r\n                        true,\r\n                        Number.MIN_SAFE_INTEGER,\r\n                        Number.MAX_SAFE_INTEGER\r\n                    );\r\n\r\n                    if (minmaxResult[0] !== -1) {\r\n                        let aiPlayRow = this.getLowestRow(minmaxResult[0]);\r\n                        currCells[aiPlayRow][minmaxResult[0]].state = \"filled\";\r\n                        currCells[aiPlayRow][minmaxResult[0]].hoverState =\r\n                            \"empty\";\r\n                        currCells[aiPlayRow][minmaxResult[0]].color = \"blue\";\r\n                        currCells[aiPlayRow][minmaxResult[0]].opacity = 1;\r\n                    } else {\r\n                        this.setState({\r\n                            gameIsOver: true,\r\n                            currentlyHovered: {\r\n                                row: undefined,\r\n                                col: undefined,\r\n                            },\r\n                        });\r\n                    }\r\n\r\n                    if (this.circleIfWin(currCells, \"blue\")) {\r\n                        this.setState({\r\n                            gameIsOver: true,\r\n                            currentlyHovered: {\r\n                                row: undefined,\r\n                                col: undefined,\r\n                            },\r\n                        });\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    currentlyHovered: { row: undefined, col: undefined },\r\n                    cells: currCells,\r\n                });\r\n\r\n                this.handleMouseEnter(currCol);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Connect4;\r\n","import React, { Component } from \"react\";\r\nimport Connect4 from \"./connect4\";\r\nimport \"../../styles/main.css\";\r\n\r\nclass Connect4Page extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main-div\">\r\n                <div className=\"py-5\"></div>\r\n                <h1 className=\"display-1 bg-dark text-warning text-center\">\r\n                    Connect 4\r\n                </h1>\r\n                <p className=\"display-1 bg-dark description-text text-center px-5\">\r\n                    Play the game of connect 4 against an AI. The AI uses a\r\n                    minmax algorithm with alpha-beta pruning to determine what\r\n                    move to make.\r\n                </p>\r\n                <Connect4></Connect4>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Connect4Page;\r\n","export function calculateMove(board, currentPiece) {\r\n    let recursionObject = {\r\n        seen: new Set(),\r\n        currMoves: [],\r\n        currMax: Number.MIN_SAFE_INTEGER,\r\n        currRotations: 0,\r\n        aiMovesRotations: 0,\r\n        aiMoves: [],\r\n    };\r\n\r\n    findBestMoves.apply(this, [board, currentPiece, recursionObject]);\r\n    return recursionObject.aiMoves;\r\n}\r\n\r\nfunction findBestMoves(board, currentPiece, recursionObject) {\r\n    let moves = [\"down\", \"left\", \"right\", \"cw\", \"ccw\"];\r\n\r\n    if (\r\n        recursionObject.seen.has(\r\n            [\r\n                currentPiece.row,\r\n                currentPiece.col,\r\n                currentPiece.rotation,\r\n            ].toString()\r\n        )\r\n    ) {\r\n        return;\r\n    }\r\n    recursionObject.seen.add(\r\n        [currentPiece.row, currentPiece.col, currentPiece.rotation].toString()\r\n    );\r\n\r\n    moves.forEach((move) => {\r\n        if (move === \"down\") {\r\n            currentPiece.row++;\r\n        } else if (move === \"left\") {\r\n            currentPiece.col--;\r\n        } else if (move === \"right\") {\r\n            currentPiece.col++;\r\n        } else if (move === \"cw\") {\r\n            this.rotatePiece(currentPiece, \"cw\");\r\n            recursionObject.currRotations++;\r\n        } else if (move === \"ccw\") {\r\n            this.rotatePiece(currentPiece, \"ccw\");\r\n            recursionObject.currRotations++;\r\n        }\r\n\r\n        recursionObject.currMoves.push(move);\r\n\r\n        if (this.overlapsOrOffBoard(board, currentPiece)) {\r\n            if (move === \"down\") {\r\n                currentPiece.row--;\r\n                board = this.placePieceOnBoard(board, currentPiece);\r\n                let value = boardValue.apply(this, [board]);\r\n                board = this.erasePieceOnBoard(board, currentPiece);\r\n                currentPiece.row++;\r\n\r\n                if (\r\n                    value > recursionObject.currMax ||\r\n                    (value === recursionObject.currMax &&\r\n                        recursionObject.currRotations <\r\n                            recursionObject.aiMovesRotations)\r\n                ) {\r\n                    recursionObject.aiMoves = [...recursionObject.currMoves];\r\n                    recursionObject.aiMovesRotations =\r\n                        recursionObject.currRotations;\r\n                    recursionObject.currMax = value;\r\n                }\r\n            }\r\n        } else {\r\n            findBestMoves.apply(this, [board, currentPiece, recursionObject]);\r\n        }\r\n\r\n        recursionObject.currMoves.pop();\r\n\r\n        if (move === \"down\") {\r\n            currentPiece.row--;\r\n        } else if (move === \"left\") {\r\n            currentPiece.col++;\r\n        } else if (move === \"right\") {\r\n            currentPiece.col--;\r\n        } else if (move === \"cw\") {\r\n            this.rotatePiece(currentPiece, \"ccw\");\r\n            recursionObject.currRotations--;\r\n        } else if (move === \"ccw\") {\r\n            this.rotatePiece(currentPiece, \"cw\");\r\n            recursionObject.currRotations--;\r\n        }\r\n    });\r\n}\r\n\r\nfunction columnHeight(board, col) {\r\n    let row = 0;\r\n    while (row < board.length && board[row][col].color === \"\") {\r\n        row++;\r\n    }\r\n\r\n    return board.length - row;\r\n}\r\n\r\nfunction numGaps(board, col) {\r\n    for (let row = 0; row < board.length; row++) {\r\n        if (board[row][col].color !== \"\") {\r\n            let gaps = 0;\r\n            for (let row2 = row; row2 < board.length; row2++) {\r\n                if (board[row2][col].color === \"\") {\r\n                    gaps++;\r\n                }\r\n            }\r\n            return gaps;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nfunction boardValue(board) {\r\n    let sumHeights = 0;\r\n    for (let col = 0; col < board[0].length; col++) {\r\n        sumHeights += columnHeight(board, col);\r\n    }\r\n\r\n    let fullRows = 0;\r\n    for (let row = 0; row < board.length; row++) {\r\n        if (this.isRowFull(board, row)) fullRows++;\r\n    }\r\n\r\n    let holes = 0;\r\n    for (let col = 0; col < board[0].length; col++) {\r\n        holes += numGaps(board, col);\r\n    }\r\n\r\n    let bumpiness = 0;\r\n    for (let col = 0; col < board[0].length - 1; col++) {\r\n        bumpiness += Math.abs(\r\n            columnHeight(board, col) - columnHeight(board, col + 1)\r\n        );\r\n    }\r\n\r\n    return (\r\n        -0.51 * sumHeights + 0.76 * fullRows - 0.36 * holes - 0.18 * bumpiness\r\n    );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Stage, Layer, Rect } from \"react-konva\";\r\nimport { calculateMove } from \"./tetrisAI\";\r\n\r\nclass Tetris extends Component {\r\n    state = {\r\n        stageWidth: 100,\r\n        stageHeight: 200,\r\n        linesCleared: 0,\r\n        gameIsOver: false,\r\n        board: [[{ color: \"\" }]],\r\n        currentPiece: {\r\n            row: 0,\r\n            col: 0,\r\n            rows: 0,\r\n            cols: 0,\r\n            pieceMatrix: [[{ color: \"\" }]],\r\n            rotation: 0,\r\n        },\r\n    };\r\n\r\n    rows = 20;\r\n    cols = 10;\r\n    tickTime = 300;\r\n    aiMoves = [];\r\n\r\n    aiPlaying = false;\r\n\r\n    tickInterval = undefined;\r\n\r\n    //Pieces\r\n    pieces = [\r\n        [\r\n            [\"\", \"0\", \"\", \"\"],\r\n            [\"\", \"0\", \"\", \"\"],\r\n            [\"\", \"0\", \"\", \"\"],\r\n            [\"\", \"0\", \"\", \"\"],\r\n        ],\r\n        [\r\n            [\"\", \"0\", \"\"],\r\n            [\"\", \"0\", \"\"],\r\n            [\"\", \"0\", \"0\"],\r\n        ],\r\n        [\r\n            [\"\", \"0\", \"\"],\r\n            [\"\", \"0\", \"\"],\r\n            [\"0\", \"0\", \"\"],\r\n        ],\r\n        [\r\n            [\"0\", \"0\"],\r\n            [\"0\", \"0\"],\r\n        ],\r\n        [\r\n            [\"0\", \"0\", \"\"],\r\n            [\"\", \"0\", \"0\"],\r\n            [\"\", \"\", \"\"],\r\n        ],\r\n        [\r\n            [\"\", \"0\", \"0\"],\r\n            [\"0\", \"0\", \"\"],\r\n            [\"\", \"\", \"\"],\r\n        ],\r\n        [\r\n            [\"\", \"0\", \"\"],\r\n            [\"0\", \"0\", \"0\"],\r\n            [\"\", \"\", \"\"],\r\n        ],\r\n    ];\r\n\r\n    //Colors\r\n    colors = [\"purple\", \"yellow\", \"orange\", \"blue\", \"aqua\", \"green\", \"red\"];\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = this.getResetState();\r\n        this.state.stageWidth = 100;\r\n        this.state.stageHeight = 200;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetBoard();\r\n        this.checkSize();\r\n        window.addEventListener(\"resize\", this.checkSize);\r\n        this.tickInterval = setInterval(() => this.gameTick(), this.tickTime);\r\n        window.addEventListener(\"keydown\", (event) =>\r\n            this.handleKeyDown(event)\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"keydown\", (event) =>\r\n            this.handleKeyDown(event)\r\n        );\r\n        window.removeEventListener(\"resize\", () => this.checkSize);\r\n        clearInterval(this.tickInterval);\r\n    }\r\n\r\n    checkSize = () => {\r\n        let w = window.innerWidth * 0.6; //Use 60% of window width/height\r\n        let h = window.innerHeight * 0.6;\r\n        let calcW = 0;\r\n        let calcH = 0;\r\n\r\n        if (w / this.cols < h / this.rows) {\r\n            calcW = w;\r\n            calcH = (w / this.cols) * this.rows;\r\n        } else {\r\n            calcW = (h / this.rows) * this.cols;\r\n            calcH = h;\r\n        }\r\n\r\n        this.setState({ stageWidth: calcW, stageHeight: calcH });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary btn-lg mx-2 my-2\"\r\n                        onClick={() => this.resetBoard()}\r\n                    >\r\n                        Reset Board\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-warning btn-lg mx-2 my-2\"\r\n                        onClick={() => this.toggleAI()}\r\n                    >\r\n                        Toggle AI\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-danger btn-lg mx-2 my-2\"\r\n                        onClick={() => this.decreaseSpeed()}\r\n                    >\r\n                        Decrease Speed\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-danger btn-lg mx-2 my-2\"\r\n                        onClick={() => this.increaseSpeed()}\r\n                    >\r\n                        Increase Speed\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <p className=\"display-1 bg-dark description-text text-center px-5 py-3\">\r\n                        {this.state.linesCleared + \" lines cleared\"}\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <Stage\r\n                        width={this.state.stageWidth}\r\n                        height={this.state.stageHeight}\r\n                    >\r\n                        <Layer>\r\n                            {this.state.board.map((row, rowIdx) => {\r\n                                return row.map((cell, colIdx) => {\r\n                                    return (\r\n                                        <Rect\r\n                                            key={\r\n                                                rowIdx.toString() +\r\n                                                \",\" +\r\n                                                colIdx.toString()\r\n                                            }\r\n                                            x={\r\n                                                (colIdx / this.cols) *\r\n                                                (this.state.stageWidth - 1)\r\n                                            }\r\n                                            y={\r\n                                                (rowIdx / this.rows) *\r\n                                                (this.state.stageHeight - 1)\r\n                                            }\r\n                                            width={\r\n                                                this.state.stageWidth /\r\n                                                this.cols\r\n                                            }\r\n                                            height={\r\n                                                this.state.stageHeight /\r\n                                                this.rows\r\n                                            }\r\n                                            stroke=\"white\"\r\n                                            fill={cell.color}\r\n                                            strokeWidth={2}\r\n                                        />\r\n                                    );\r\n                                });\r\n                            })}\r\n                            {this.state.currentPiece.pieceMatrix.map(\r\n                                (row, rowIdx) => {\r\n                                    return row.map((cell, colIdx) => {\r\n                                        return (\r\n                                            <Rect\r\n                                                key={\r\n                                                    \"currentPiece,\" +\r\n                                                    rowIdx.toString() +\r\n                                                    \",\" +\r\n                                                    colIdx.toString()\r\n                                                }\r\n                                                x={\r\n                                                    ((colIdx +\r\n                                                        this.state.currentPiece\r\n                                                            .col) /\r\n                                                        this.cols) *\r\n                                                    (this.state.stageWidth - 1)\r\n                                                }\r\n                                                y={\r\n                                                    ((rowIdx +\r\n                                                        this.state.currentPiece\r\n                                                            .row) /\r\n                                                        this.rows) *\r\n                                                    (this.state.stageHeight - 1)\r\n                                                }\r\n                                                width={\r\n                                                    this.state.stageWidth /\r\n                                                    this.cols\r\n                                                }\r\n                                                height={\r\n                                                    this.state.stageHeight /\r\n                                                    this.rows\r\n                                                }\r\n                                                stroke=\"white\"\r\n                                                fill={cell.color}\r\n                                                strokeWidth={2}\r\n                                            />\r\n                                        );\r\n                                    });\r\n                                }\r\n                            )}\r\n                        </Layer>\r\n                    </Stage>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    getResetState() {\r\n        let initialBoard = Array.from(Array(this.rows), () => {\r\n            return Array.from(Array(this.cols), () => {\r\n                return { color: \"\" };\r\n            });\r\n        });\r\n\r\n        return {\r\n            linesCleared: 0,\r\n            gameIsOver: false,\r\n            board: initialBoard,\r\n            currentPiece: {\r\n                row: 0,\r\n                col: 0,\r\n                rows: 0,\r\n                cols: 0,\r\n                pieceMatrix: [[{ color: \"\" }]],\r\n                rotation: 0,\r\n            },\r\n        };\r\n    }\r\n\r\n    resetBoard() {\r\n        this.setState(this.getResetState());\r\n        this.spawnPiece();\r\n    }\r\n\r\n    spawnPiece() {\r\n        let randPiece =\r\n            this.pieces[Math.floor(Math.random() * this.pieces.length)];\r\n        let randColor =\r\n            this.colors[Math.floor(Math.random() * this.colors.length)];\r\n        let pieceRows = randPiece.length;\r\n        let pieceCols = pieceRows > 0 ? randPiece[0].length : 0;\r\n\r\n        //Copy the random piece and add color\r\n        let randPieceMatrix = Array.from(Array(pieceRows), (row, rowIdx) =>\r\n            [...randPiece[rowIdx]].map((x) =>\r\n                x === \"\" ? { color: \"\" } : { color: randColor }\r\n            )\r\n        );\r\n\r\n        let newPiece = {\r\n            row: 0,\r\n            col: Math.round(this.cols / 2) - Math.round(pieceCols / 2),\r\n            rows: pieceRows,\r\n            cols: pieceCols,\r\n            pieceMatrix: randPieceMatrix,\r\n            rotation: 0,\r\n        };\r\n\r\n        this.setState({\r\n            currentPiece: newPiece,\r\n        });\r\n\r\n        if (this.overlapsOrOffBoard(this.state.board, newPiece)) {\r\n            this.setState({ gameIsOver: true });\r\n        }\r\n    }\r\n\r\n    overlapsOrOffBoard(board, piece) {\r\n        for (let row = piece.row; row < piece.row + piece.rows; row++) {\r\n            for (let col = piece.col; col < piece.col + piece.cols; col++) {\r\n                if (\r\n                    row < 0 ||\r\n                    row >= this.rows ||\r\n                    col < 0 ||\r\n                    col >= this.cols\r\n                ) {\r\n                    if (\r\n                        piece.pieceMatrix[row - piece.row][col - piece.col]\r\n                            .color !== \"\"\r\n                    ) {\r\n                        //Return true if piece is off the board\r\n                        return true;\r\n                    }\r\n                } else if (\r\n                    piece.pieceMatrix[row - piece.row][col - piece.col]\r\n                        .color !== \"\" &&\r\n                    board[row][col].color !== \"\"\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isRowFull(board, row) {\r\n        return board[row].every((elem) => elem.color !== \"\");\r\n    }\r\n\r\n    clearRow(row) {\r\n        let newBoard = this.state.board;\r\n        newBoard.splice(row, 1);\r\n        newBoard.splice(\r\n            0,\r\n            0,\r\n            Array.from(Array(this.cols), (elem) => ({ color: \"\" }))\r\n        );\r\n\r\n        this.setState({ board: newBoard });\r\n    }\r\n\r\n    clearFullRows() {\r\n        let rowsCleared = 0;\r\n        for (let row = 0; row < this.rows; row++) {\r\n            if (this.isRowFull(this.state.board, row)) {\r\n                this.clearRow(row);\r\n                rowsCleared++;\r\n            }\r\n        }\r\n\r\n        this.setState({ linesCleared: this.state.linesCleared + rowsCleared });\r\n    }\r\n\r\n    getHeightWithoutEmptyRows(piece) {\r\n        for (let row = piece.rows - 1; row >= 0; row--) {\r\n            if (!piece.pieceMatrix[row].every((cell) => cell.color === \"\")) {\r\n                return row + 1;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    rotatePiece(piece, dir) {\r\n        for (let row = 0; row < piece.rows; row++) {\r\n            for (let col = 0; col < row; col++) {\r\n                [piece.pieceMatrix[row][col], piece.pieceMatrix[col][row]] = [\r\n                    piece.pieceMatrix[col][row],\r\n                    piece.pieceMatrix[row][col],\r\n                ];\r\n            }\r\n        }\r\n\r\n        if (dir === \"cw\") {\r\n            piece.pieceMatrix.reverse();\r\n            piece.rotation++;\r\n        } else if (dir === \"ccw\") {\r\n            piece.pieceMatrix.map((row) => row.reverse());\r\n            piece.rotation--;\r\n        }\r\n\r\n        piece.rotation = (piece.rotation + 4) % 4;\r\n    }\r\n\r\n    placePieceOnBoard(board, piece) {\r\n        piece.pieceMatrix.forEach((row, rowIdx) => {\r\n            row.forEach((cell, colIdx) => {\r\n                if (cell.color !== \"\") {\r\n                    board[piece.row + rowIdx][piece.col + colIdx].color =\r\n                        cell.color;\r\n                }\r\n            });\r\n        });\r\n\r\n        return board;\r\n    }\r\n\r\n    erasePieceOnBoard(board, piece) {\r\n        piece.pieceMatrix.forEach((row, rowIdx) => {\r\n            row.forEach((cell, colIdx) => {\r\n                if (cell.color !== \"\") {\r\n                    board[piece.row + rowIdx][piece.col + colIdx].color = \"\";\r\n                }\r\n            });\r\n        });\r\n\r\n        return board;\r\n    }\r\n\r\n    gameTick() {\r\n        if (!this.state.gameIsOver) {\r\n            let newPiece = this.state.currentPiece;\r\n\r\n            if (this.aiPlaying) {\r\n                if (this.aiMoves.length === 0) {\r\n                    //Using JSON to duplicate the object to prevent react from updating the view while the AI is calculating moves\r\n                    this.aiMoves = calculateMove.apply(this, [\r\n                        JSON.parse(JSON.stringify(this.state.board)),\r\n                        JSON.parse(JSON.stringify(newPiece)),\r\n                    ]);\r\n                    this.aiMoves.reverse();\r\n                }\r\n\r\n                while (\r\n                    this.aiMoves.length > 0 &&\r\n                    this.aiMoves[this.aiMoves.length - 1] !== \"down\"\r\n                ) {\r\n                    let aiMove = this.aiMoves.pop();\r\n                    if (aiMove === \"left\") {\r\n                        newPiece.col--;\r\n                    } else if (aiMove === \"right\") {\r\n                        newPiece.col++;\r\n                    } else if (aiMove === \"cw\") {\r\n                        this.rotatePiece(newPiece, \"cw\");\r\n                    } else if (aiMove === \"ccw\") {\r\n                        this.rotatePiece(newPiece, \"ccw\");\r\n                    }\r\n                }\r\n                if (this.aiMoves.length > 0) {\r\n                    this.aiMoves.pop();\r\n                }\r\n            }\r\n\r\n            newPiece.row++;\r\n            this.setState({ currentPiece: newPiece });\r\n            if (this.overlapsOrOffBoard(this.state.board, newPiece)) {\r\n                newPiece.row--;\r\n                this.setState({\r\n                    board: this.placePieceOnBoard(this.state.board, newPiece),\r\n                });\r\n                this.spawnPiece();\r\n                this.clearFullRows();\r\n            }\r\n        }\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        if (!this.aiPlaying) {\r\n            if (event.key === \"w\") {\r\n                this.playerRotateRight();\r\n            } else if (event.key === \"a\") {\r\n                this.playerMoveLeft();\r\n            } else if (event.key === \"s\") {\r\n                this.playerRotateLeft();\r\n            } else if (event.key === \"d\") {\r\n                this.playerMoveRight();\r\n            }\r\n        }\r\n    }\r\n\r\n    playerMoveRight() {\r\n        let newPiece = this.state.currentPiece;\r\n        newPiece.col++;\r\n        if (!this.overlapsOrOffBoard(this.state.board, newPiece)) {\r\n            this.setState({ currentPiece: newPiece });\r\n        } else {\r\n            newPiece.col--;\r\n        }\r\n    }\r\n\r\n    playerMoveLeft() {\r\n        let newPiece = this.state.currentPiece;\r\n        newPiece.col--;\r\n        if (!this.overlapsOrOffBoard(this.state.board, newPiece)) {\r\n            this.setState({ currentPiece: newPiece });\r\n        } else {\r\n            newPiece.col++;\r\n        }\r\n    }\r\n\r\n    playerRotateRight() {\r\n        let newPiece = this.state.currentPiece;\r\n        this.rotatePiece(newPiece, \"cw\");\r\n        if (!this.overlapsOrOffBoard(this.state.board, newPiece)) {\r\n            this.setState({ currentPiece: newPiece });\r\n        } else {\r\n            this.rotatePiece(newPiece, \"ccw\");\r\n        }\r\n    }\r\n\r\n    playerRotateLeft() {\r\n        let newPiece = this.state.currentPiece;\r\n        this.rotatePiece(newPiece, \"ccw\");\r\n        if (!this.overlapsOrOffBoard(this.state.board, newPiece)) {\r\n            this.setState({ currentPiece: newPiece });\r\n        } else {\r\n            this.rotatePiece(newPiece, \"cw\");\r\n        }\r\n    }\r\n\r\n    increaseSpeed() {\r\n        if (this.tickTime - 50 > 0) {\r\n            clearInterval(this.tickInterval);\r\n            this.tickTime -= 50;\r\n            this.tickInterval = setInterval(\r\n                () => this.gameTick(),\r\n                this.tickTime\r\n            );\r\n        }\r\n    }\r\n\r\n    decreaseSpeed() {\r\n        if (this.tickTime + 50 < Number.MAX_SAFE_INTEGER) {\r\n            clearInterval(this.tickInterval);\r\n            this.tickTime += 50;\r\n            this.tickInterval = setInterval(\r\n                () => this.gameTick(),\r\n                this.tickTime\r\n            );\r\n        }\r\n    }\r\n\r\n    toggleAI() {\r\n        this.aiPlaying = !this.aiPlaying;\r\n        this.aiMoves = [];\r\n    }\r\n}\r\n\r\nexport default Tetris;\r\n","import React, { Component } from \"react\";\r\nimport Tetris from \"./tetris\";\r\nimport \"../../styles/main.css\";\r\n\r\nclass TetrisPage extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main-div\">\r\n                <div className=\"py-5\"></div>\r\n                <h1 className=\"display-1 bg-dark text-warning text-center\">\r\n                    Tetris\r\n                </h1>\r\n                <p className=\"display-1 bg-dark description-text text-center px-5\">\r\n                    Either play the game of tetris or watch an AI play it. The\r\n                    AI uses a depth first search algorithm to determine what\r\n                    moves to make.\r\n                </p>\r\n                <Tetris></Tetris>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TetrisPage;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/navButton.css\";\r\n\r\nclass NavButton extends Component {\r\n    render() {\r\n        return this.getNavButton(this.props.data);\r\n    }\r\n\r\n    getNavButton = (navButton) => {\r\n        if (navButton.children.length === 0) {\r\n            return (\r\n                <div className={this.props.className}>\r\n                    <div\r\n                        className=\"collapse navbar-collapse\"\r\n                        id=\"navbarSupportedContent\"\r\n                    >\r\n                        <ul className=\"navbar-nav\">\r\n                            <li className=\"nav-item\">\r\n                                <a\r\n                                    className=\"nav-link active\"\r\n                                    aria-current=\"page\"\r\n                                    href={navButton.header.link}\r\n                                >\r\n                                    {navButton.header.name}\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className={this.props.className}>\r\n                    <button\r\n                        className=\"navbar-toggler\"\r\n                        type=\"button\"\r\n                        data-bs-toggle=\"collapse\"\r\n                        data-bs-target=\"#navbarSupportedContent\"\r\n                        aria-controls=\"navbarSupportedContent\"\r\n                        aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\"\r\n                    ></button>\r\n                    <div\r\n                        className=\"collapse navbar-collapse\"\r\n                        id=\"navbarSupportedContent\"\r\n                    >\r\n                        <ul className=\"navbar-nav\">\r\n                            <li className=\"nav-item dropdown\">\r\n                                <a\r\n                                    className=\"nav-link dropdown-toggle\"\r\n                                    //href=\"#\"\r\n                                    id=\"navbarDropdown\"\r\n                                    role=\"button\"\r\n                                    data-bs-toggle=\"dropdown\"\r\n                                    aria-expanded=\"false\"\r\n                                >\r\n                                    {navButton.header.name}\r\n                                </a>\r\n                                <ul\r\n                                    className=\"dropdown-menu\"\r\n                                    aria-labelledby=\"navbarDropdown\"\r\n                                >\r\n                                    {navButton.children.map((child) => (\r\n                                        <li key={child.name}>\r\n                                            <a\r\n                                                className=\"dropdown-item\"\r\n                                                href={child.link}\r\n                                            >\r\n                                                {child.name}\r\n                                            </a>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n}\r\n\r\nexport default NavButton;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/navButton.css\";\r\nimport NavButton from \"./navbutton\";\r\n\r\nclass NavBar extends Component {\r\n    state = {\r\n        navButtons: [\r\n            { header: { name: \"Home\", link: \"/\" }, children: [] },\r\n            /*{\r\n                header: { name: \"Data Structures\" },\r\n                children: [\r\n                    { name: \"Red-Black Tree\", link: \"/datastructures/rbt\" },\r\n                    { name: \"AVL Tree\", link: \"/datastructures/avl\" },\r\n                ],\r\n            },\r\n            {\r\n                header: { name: \"Algorithms\" },\r\n                children: [\r\n                    { name: \"Sorting\", link: \"/algorithms/sorting\" },\r\n                    { name: \"Pathfinding\", link: \"/algorithms/pathfinding\" },\r\n                ],\r\n            },*/\r\n            {\r\n                header: { name: \"Games\" },\r\n                children: [\r\n                    { name: \"Tetris\", link: \"/games/tetris\" },\r\n                    { name: \"Connect 4\", link: \"/games/connect4\" },\r\n                ],\r\n            },\r\n        ],\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <link href=\"/src/styles/navButton.css\" rel=\"stylesheet\"></link>\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                    <div className=\"container-fluid d-flex justify-content-end\">\r\n                        {this.state.navButtons.map((navButton) => (\r\n                            <NavButton\r\n                                key={navButton.header.name}\r\n                                className=\"mx-4\"\r\n                                data={navButton}\r\n                            ></NavButton>\r\n                        ))}\r\n                        <div className=\"spacer\"></div>\r\n                    </div>\r\n                </nav>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/main.css\";\r\n\r\nclass Footer extends Component {\r\n    state = {};\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"py-5\"></div>\r\n                <div className=\"py-1 footer-text text-center bg-dark\">\r\n                    Copyright © Jason Hirsch\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport HomePage from \"./components/homePage/homePage\";\r\nimport Connect4Page from \"./components/connect4Page/connect4Page\";\r\nimport TetrisPage from \"./components/tetrisPage/tetrisPage\";\r\nimport NavBar from \"./components/navbar\";\r\nimport Footer from \"./components/footer\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <Router>\r\n            <NavBar></NavBar>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <HomePage></HomePage>\r\n                </Route>\r\n                <Route path=\"/games/connect4\">\r\n                    <Connect4Page></Connect4Page>\r\n                </Route>\r\n                <Route path=\"/games/tetris\">\r\n                    <TetrisPage></TetrisPage>\r\n                </Route>\r\n            </Switch>\r\n            <Footer></Footer>\r\n        </Router>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./routes\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}